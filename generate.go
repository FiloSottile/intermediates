// Copyright 2021 Google LLC
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

//go:build generate
// +build generate

package main

import (
	"bytes"
	"crypto/sha256"
	"crypto/x509"
	"encoding/csv"
	"encoding/pem"
	"io"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"
)

//go:generate go run generate.go

// ccadb is from https://wiki.mozilla.org/CA/Intermediate_Certificates.
const ccadb = "https://ccadb-public.secure.force.com/mozilla/MozillaIntermediateCertsCSVReport"

func main() {
	c := &http.Client{Timeout: 1 * time.Minute}
	req, err := c.Get(ccadb)
	fatalIfErr(err)
	defer req.Body.Close()
	if req.StatusCode != http.StatusOK {
		log.Fatalf("GET got %d: %v", req.StatusCode, req.Status)
	}

	buf := &bytes.Buffer{}
	count := 0
	seen := make(map[[sha256.Size]byte]bool)

	r := csv.NewReader(req.Body)
	header, err := r.Read()
	fatalIfErr(err)
	if header[4] != "PEM" {
		log.Fatal("Format changed.")
	}

	buf.WriteString("`\n")
	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		fatalIfErr(err)

		b, _ := pem.Decode([]byte(record[4]))
		if b == nil {
			log.Fatalf("Record is not valid PEM: %#v", record)
		}
		if _, err := x509.ParseCertificate(b.Bytes); err != nil {
			log.Printf("%#v", record)
			log.Fatalf("Invalid certificate: %v", err)
		}
		hash := sha256.Sum256(b.Bytes)
		if seen[hash] {
			log.Printf("Duplicate record: %v", record[0])
			continue
		}
		seen[hash] = true

		buf.WriteString("# Subject: " + record[0] + "\n")
		buf.WriteString("# Issuer: " + record[1] + "\n")
		buf.WriteString(record[4])
		buf.WriteString("\n")
		count++
	}
	buf.WriteString("`")

	f, err := os.Create("certificates.go")
	fatalIfErr(err)
	defer func() { fatalIfErr(f.Close()) }()

	tmpl.Execute(f, map[string]interface{}{
		"Count": count,
		"PEM":   buf.String(),
	})

	log.Printf("Wrote %d intermediates.", count)
}

var tmpl = template.Must(template.New("code").Parse(
	`// Code generated by generate.go. DO NOT EDIT.

package intermediates

const expectedCount = {{ .Count }}

const pemList = {{ .PEM }}
`))

func fatalIfErr(err error) {
	if err != nil {
		log.Panic(err)
	}
}
